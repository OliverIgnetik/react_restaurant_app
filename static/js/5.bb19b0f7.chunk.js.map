{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","components/UI/Button/Button.js","components/UI/Button/Button.module.css","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","props","checkValidity","value","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","String","toLowerCase","inputChangedHandler","event","controlName","updatedControls","state","controls","target","valid","validation","touched","setState","submitHandler","preventDefault","onAuth","email","password","isSignUp","switchAuthModeHandler","prevState","elementType","elementConfig","type","placeholder","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","el","shouldValidate","invalid","changed","loading","errorMessage","error","text","message","replace","style","color","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","spinner","Loader","button","disabled","Button","join","onClick","children","input","inputElement","inputClasses","InputElement","Invalid","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/5.bb19b0f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__Z92Nv\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nclass Auth extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      controls: {\r\n        email: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n            type: 'email',\r\n            placeholder: 'Your E-mail',\r\n          },\r\n          validation: {\r\n            required: true,\r\n            isEmail: true,\r\n          },\r\n          valid: false,\r\n          value: '',\r\n          touched: false,\r\n        },\r\n        password: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n            type: 'password',\r\n            placeholder: 'Your password',\r\n          },\r\n          validation: {\r\n            required: true,\r\n            minLength: 6,\r\n          },\r\n          valid: false,\r\n          value: '',\r\n          touched: false,\r\n        },\r\n      },\r\n      isSignUp: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  checkValidity = (value, rules) => {\r\n    // make sure all the validations pass\r\n    let isValid = true;\r\n    if (rules.required) {\r\n      isValid = value.trim() !== '' && isValid;\r\n    }\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n\r\n    if (rules.isEmail) {\r\n      var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n      isValid = re.test(String(value).toLowerCase()) && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    // deep clone needs multiple spread operators to avoid pointers\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        valid: this.checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation,\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignUp,\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return { ...prevState, isSignUp: !prevState.isSignUp };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map(el => (\r\n      <Input\r\n        key={el.id}\r\n        touched={el.config.touched}\r\n        shouldValidate={el.config.validation}\r\n        invalid={!el.config.valid}\r\n        elementType={el.config.elementType}\r\n        elementConfig={el.config.elementConfig}\r\n        value={el.config.value}\r\n        changed={event => this.inputChangedHandler(event, el.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      const text = this.props.error.message.replace('_', ' ');\r\n      errorMessage = <p style={{ color: 'red' }}>{text}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType='Success'>SUBMIT</Button>\r\n        </form>\r\n        <Button clicked={this.switchAuthModeHandler} btnType='Danger'>\r\n          SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')),\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from 'react';\r\nimport classes from './Spinner.module.css';\r\n\r\nconst spinner = () => {\r\n  return <div className={classes.Loader}>Loading..</div>;\r\n};\r\n\r\nexport default spinner;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__3lUvp\",\"load2\":\"Spinner_load2__2Ao1I\"};","import React from 'react';\r\nimport classes from './Button.module.css';\r\n\r\nconst button = props => (\r\n  <button\r\n    disabled={props.disabled}\r\n    className={[classes.Button, classes[props.btnType]].join(' ')}\r\n    onClick={props.clicked}>\r\n    {props.children}\r\n  </button>\r\n);\r\n\r\nexport default button;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3bMLs\",\"Success\":\"Button_Success__274aK\",\"Danger\":\"Button_Danger__2LNAf\"};","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}>\r\n          {props.elementConfig.options.map(option => (\r\n            <option value={option.value} key={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3y9dP\",\"Label\":\"Input_Label__1mc4o\",\"InputElement\":\"Input_InputElement__L7XII\",\"Invalid\":\"Input_Invalid__1RGfb\",\"ValidationError\":\"Input_ValidationError__1sFzt\"};"],"sourceRoot":""}